#include "stdafx.h"
#include <string>
#include <iostream>
#include <sstream>
#include <time.h> 
#include <fstream>
#include <istream>
#include <ctime>

using namespace std;
// Student
class Student{
private:
        int nrgr;
        int* oceny;
        string inicialy;
                //Student(){;};

public:
                Student(){;};
        Student(string, int, int*);
                Student(Student &);
        ~Student();
        string getInicialy();
                string getOceny();
                string getNrgr();
                void Display();
                void setStudent(string, int, int*);

}   ;             


Student::Student(string _inicialy, int _nrgr, int* o  )
{
        setStudent(_inicialy,  _nrgr, o);
        
}
Student::~Student(){;}

Student::Student(Student &source)
{
        nrgr=source.nrgr;
        oceny = new int[10];
        for (int i=0;i<10; i++)
        {
        oceny[i] = source.oceny[i];
        }
        inicialy = source.inicialy;
}

void Student::setStudent(string _inicialy, int _nrgr, int* o  )
{
        inicialy = _inicialy;
        nrgr= _nrgr;
        oceny = new int [10];
        for(int i=0;i<10;i++)
        {
        oceny[i]=o[i];
        }
}

string Student::getInicialy()
{
        return inicialy;
}

string Student::getNrgr()
{
        stringstream s1;
        s1 << nrgr;
        return s1.str();

}

string Student::getOceny()
{   
        stringstream s2;
        int* tmp_tab = new int[10];
        string temp;
        for(int i=0; i<10;i++)
        {
                tmp_tab[i]=oceny[i];
                s2 << tmp_tab[i] << " ";
        }
        return s2.str();
}

void Student::Display()
{
        cout << getInicialy() << endl;
        cout << getNrgr() << endl;
        cout << getOceny() << endl;
}

//Grupa

class Group
{
private:
        Student* list;
        int amount;
        Group(){};
public:
        Group(int);
        ~Group();
        Group(Group &);
        void getList();
        void add(int, string, int, int*);

};

Group::Group(int _number)
{
        amount = _number;
        list = new Student[amount];

}

Group::Group(Group &source)
{
        amount=source.amount;
        list = new Student[source.amount];
        for(int i=0;i<source.amount;i++)
        {
                Student s(source.list[i]);
                list[i] = s;
        }
}

Group::~Group(){;}

void Group::add(int _place, string _inicialy, int _nrgr, int* o)
{
        list[_place] = Student(_inicialy,  _nrgr, o);
 /* cout << list[_place].getInicialy()<<endl;
        cout << list[_place].getNrgr()<<endl;
        cout << list[_place].getOceny()<<endl; */
}

void Group::getList()
{
        for(int i=0; i<amount; i++)
        {
                // list[i].Display();
                cout <<        list[i].getInicialy() << endl;
                cout <<        list[i].getNrgr() << endl;
                cout <<        list[i].getOceny() << endl; 
        }
}

void file_read ()
{
	ifstream inputFile ("fooboo.txt");
	if (!inputFile.is_open())
		throw std::exception("Can't read fooboo.txt");
	if (true)
	{
		string lineAsString;
		while (!inputFile.eof())
		{
			inputFile >> lineAsString;
			cout << lineAsString << endl;
		}
	}
	else
	{
		char *lineAsCharPointer=new char[200];
		while (inputFile.getline(lineAsCharPointer, 100))
			cout << lineAsCharPointer << endl;
	}
}


void save()
{
	ofstream outputFile("fooboo.txt");
	if (!outputFile.is_open())
		throw std::exception("Can't write fooboo.txt");
	outputFile <<"Line 1" <<endl;
	char *lineAsCharPointer="lineAsChar*";
	outputFile << *lineAsCharPointer <<endl;
	string lineAsString="LineAsString";
	outputFile << lineAsString << endl;
}



void print_time()
{
	time_t t = time(0);
	struct tm now;
	localtime_s(&now, &t);
	cout << (now.tm_year + 1900) << '-' 
		<< (now.tm_mon +1) <<'-' << now.tm_mday << endl 
		<< now.tm_hour <<':' << now.tm_min << ':' 
		<< now.tm_sec << endl; 
}



int _tmain(int argc, _TCHAR* argv[])
{
        
 Group grupa1 = Group(5);
        Group grupa2 = Group(5);

        int student1_oceny[10];
        for(int i=0;i<10;i++)
        {
                student1_oceny[i] = rand() % 4+2;

        }

        for(int i=0;i<5;i++)
        {
                grupa1.add(i,"mw",210,student1_oceny);
        }

        cout << "Grupa 1:"<< endl;
    grupa1.getList(); 

        int student2_oceny[10];
        for(int i=0;i<10;i++)
        {
                student2_oceny[i] = rand() % 4+2;

        }

        for(int i=0;i<5;i++)
        {
                grupa2.add(i,"pb",120,student2_oceny);
        }
        cout << "Grupa 2:" << endl;
    grupa2.getList(); 


        cout << "Grupa 3:" << endl;
        Group grupa3 = Group(grupa2);
        grupa3.getList();


		cout << endl <<print_time << endl << endl;


        /*Student uno = Student("ch",110,student2_oceny);
        Student duo = Student(uno);
        duo.Display();
        */

        system("pause");
}
